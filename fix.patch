diff --git a/src/main.rs b/src/main.rs
index e06ae38..458fa7f 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,3 +1,6 @@
+#![feature(unboxed_closures)]
+#![feature(fn_traits)]
+
 mod ast;
 mod parser;
 
diff --git a/src/parser.rs b/src/parser.rs
index 377330e..058951b 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -1,7 +1,10 @@
 //! Parse a string into egglog.
 
 use crate::*;
-use std::sync::{Arc, LazyLock};
+use std::{
+    marker::PhantomData,
+    sync::{Arc, LazyLock},
+};
 
 pub fn parse_program(filename: Option<String>, input: &str) -> Result<Vec<Command>, ParseError> {
     let (out, _span, rest) = program(&Context::new(filename, input))?;
@@ -158,15 +161,58 @@ impl Context {
 type Res<T> = Result<(T, Span, Context), ParseError>;
 
 trait Parser<T>: Fn(&Context) -> Res<T> + Clone {
-    fn map<U>(self, f: impl Fn(T, Span) -> U + Clone) -> impl Parser<U> {
-        move |ctx| {
-            let (x, span, next) = self(ctx)?;
-            Ok((f(x, span.clone()), span, next))
-        }
+    fn map<F, U>(self, f: F) -> Map<Self, F, T>
+    where
+        F: Fn(T, Span) -> U + Clone,
+    {
+        Map(self, f, PhantomData)
     }
 }
 impl<T, F: Fn(&Context) -> Res<T> + Clone> Parser<T> for F {}
 
+struct Map<P, F, T>(P, F, PhantomData<T>);
+
+impl<P, F, T> Clone for Map<P, F, T>
+where
+    P: Clone,
+    F: Clone,
+{
+    fn clone(&self) -> Self {
+        Map(self.0.clone(), self.1.clone(), PhantomData)
+    }
+}
+
+impl<P, F, T, U> FnOnce<(&Context,)> for Map<P, F, T>
+where
+    P: Parser<T>,
+    F: Fn(T, Span) -> U + Clone,
+{
+    type Output = Res<U>;
+
+    extern "rust-call" fn call_once(self, args: (&Context,)) -> Self::Output {
+        <Self as Fn<(&Context,)>>::call(&self, args)
+    }
+}
+impl<P, F, T, U> FnMut<(&Context,)> for Map<P, F, T>
+where
+    P: Parser<T>,
+    F: Fn(T, Span) -> U + Clone,
+{
+    extern "rust-call" fn call_mut(&mut self, args: (&Context,)) -> Self::Output {
+        <Self as Fn<(&Context,)>>::call(&self, args)
+    }
+}
+impl<P, F, T, U> Fn<(&Context,)> for Map<P, F, T>
+where
+    P: Parser<T>,
+    F: Fn(T, Span) -> U + Clone,
+{
+    extern "rust-call" fn call(&self, (ctx,): (&Context,)) -> Self::Output {
+        let (x, span, next) = self.0(ctx)?;
+        Ok(((self.1)(x, span.clone()), span, next))
+    }
+}
+
 fn ident(ctx: &Context) -> Res<Symbol> {
     let mut span = ctx.span();
     if ctx.index >= ctx.source.contents.len() {
